package com.celebihacker.ml.logreg.ensemble;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URI;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;

import com.celebihacker.ml.VectorLabeledWritable;

/**
 * TODO Improvement: Switch to current stable Hadoop Release 1.1.2 (currently using 1.0.4) 
 */
public class EnsembleJob extends Configured implements Tool {

  static final boolean RUN_LOCAL_MODE = true;
  
  // 47236 is highest term id
  static final int FEATURES = 47237;
  // 381327 points labeled with CCAT (RCV1-v2)
  // 810935 is highest document-id
  static final int TOTAL = 810935;
  static final int TARGETS = 2;
  static final String TARGET_POSITIVE = "CCAT";
  
  static final int REDUCE_TASKS = 4;
  
  private static final String LABEL_FILE_LOCAL = "/home/andre/dev/datasets/RCV1-v2/rcv1-v2.topics_ccat.qrels";
  private static final String LABEL_FILE_HDFS = "rcv1-v2/rcv1-v2.topics_ccat.qrels";
  private static final String INPUT_FILE_LOCAL = "/home/andre/dev/datasets/RCV1-v2/vectors/lyrl2004_vectors_train.dat";
  private static final String INPUT_FILE_HDFS = "rcv1-v2/lyrl2004_vectors_train.dat";
  
  private static final String JAR_PATH = "target/aim3-logreg-0.0.1-SNAPSHOT-job.jar";
  private static final String CONFIG_FILE_PATH = "core-site.xml";
  private static final String OUTPUT_PATH = "output-aim3";
  
  /**
   * Will be called from ToolRunner internally
   * Hopefully passes us only the args after generic options
   */
  public int run(String[] args) throws Exception {
//    if (args.length != 2) {
//      System.err.printf("Usage: %s [generic options] <input> <output>", getClass().getSimpleName());
//      ToolRunner.printGenericCommandUsage(System.err);
//      return -1;
//    }
//    String inputFile = args[0];
//    String outputDir = args[1];

    Job job = prepareJob();

    // Broadcast Labels as a vector to all Reducers
    if (RUN_LOCAL_MODE) {
      DistributedCache.addCacheFile(new URI(LABEL_FILE_LOCAL), job.getConfiguration());
    } else {
      DistributedCache.addCacheFile(new URI(LABEL_FILE_HDFS), job.getConfiguration());
    }
    
    return job.waitForCompletion(true) ? 0 : 1;
  }
  
  private Job prepareJob() throws IOException {
    
    Job job = new Job(getConf(), "rcv1");
    Configuration conf = job.getConfiguration();
    job.setJarByClass(getClass());
    
    String inputFile = "";  // will be set depending on localmode or not
    
    // Work with local information (not in local mode)
    // Requires building of the jar first: mvn package
    if (RUN_LOCAL_MODE) {
      System.out.println("RUN IN LOCAL MODE");
      new DeletingVisitor().accept(new File(OUTPUT_PATH));
      inputFile = INPUT_FILE_LOCAL;
    } else {
      System.out.println("RUN IN PSEUDO-DISTRIBUTED/CLUSTER MODE");
      // reads configuration in core-site.xml. hdfs for me
      inputFile = INPUT_FILE_HDFS;
      conf.addResource(new Path(CONFIG_FILE_PATH));
      
      // This jar has all required dependencies in it. Must be built first (mvn package)!
      conf.set("mapred.jar", JAR_PATH);
      
      // Set number of mappers and reducers manually
      // Not done here, will be done via command line parameter
      //conf.setNumMapTasks(4);
//      job.setNumReduceTasks(4);
      conf.setInt("mapred.reduce.tasks", REDUCE_TASKS);
//      conf.setInt("mapred.tasktracker.reduce.tasks.maximum", 4);
      
      // Delete old output dir
      FileSystem hdfs = FileSystem.get(conf);
      Path path = new Path(OUTPUT_PATH);
      hdfs.delete(path, true);
    }
    System.out.println("Jar path: " + job.getJar());
    
    job.setOutputKeyClass(IntWritable.class);
    job.setOutputValueClass(VectorLabeledWritable.class);
  
    job.setMapperClass(EnsembleMapper.class);
//    job.setCombinerClass(Reduce.class);
    job.setReducerClass(EnsembleReducer.class);
  
    // Input/Output Format
    // We use the default.
    // For file based input/output formats we can use the predefined FileInputFormat class
    // It has a generic implementation of getSplits()
    // One map tasks is spawned for each InputSplit generated by the InputFormat
    // see http://hadoop.apache.org/docs/current/api/org/apache/hadoop/mapred/InputFormat.html
    //job.setInputFormatClass(TextInputFormat.class);
    //job.setOutputFormatClass(TextOutputFormat.class);
  
    // configure the used input/output format class.
    FileInputFormat.addInputPath(job, new Path(inputFile));
    FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PATH));
    
    return job;
  }

  /**
   * Copied from MahoutTestCase. Recursively deletes folder and contained files
   */
  private static class DeletingVisitor implements FileFilter {
    
    public boolean accept(File f) {
      if (!f.isFile()) {
        f.listFiles(this);
      }
      f.delete();
      return false;
    }
  }

}
